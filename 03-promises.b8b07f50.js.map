{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAmCA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,aAAY,KACNN,EAEFI,EAAQ,C,SAAEN,E,MAAUC,IAGpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA7CEQ,SAASC,cAAc,SAE/BC,iBAAiB,UAExB,SAAkBC,GAChBA,EAAIC,iBAEJ,MACEC,UAAYb,MAAAc,EAAKC,KAAEA,EAAIC,OAAEA,IACvBL,EAAIM,OAER,IAAIC,EAAaC,OAAOL,EAAMM,OAC9B,MAAMC,EAAYF,OAAOJ,EAAKK,OACxBE,EAAcH,OAAOH,EAAOI,OAClC,GAAIF,EAAa,GAAKG,EAAY,GAAKC,EAAc,EAEnD,YADA1B,EAAA2B,OAAOC,KAAK,yBAGd,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAaG,GAAK,EAAG,CAEvC3B,EADe2B,EAAI,EACKP,GACrBQ,MAAK,EAAC3B,SAAEA,EAAQC,MAAEA,MAEjBJ,EAAA2B,OAAOI,QAAQ,uBAAqB5B,QAAiBC,MAAU,IAEhE4B,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MAElBJ,EAAA2B,OAAOM,QAAQ,sBAAoB9B,QAAiBC,MAAU,IAElEkB,GAAcG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\n\nformEl.addEventListener('submit', onSubmit);\n\nfunction onSubmit(evt) {\n  evt.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = evt.target;\n\n  let inputDelay = Number(delay.value);\n  const inputStep = Number(step.value);\n  const inputAmount = Number(amount.value);\n  if (inputDelay < 0 || inputStep < 0 || inputAmount < 0) {\n    Notify.info('Data must be positive');\n    return;\n  }\n  for (let i = 0; i < inputAmount; i += 1) {\n    let position = i + 1;\n    createPromise(position, inputDelay)\n      .then(({ position, delay }) => {\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    inputDelay += inputStep;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setInterval(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setInterval","document","querySelector","addEventListener","evt","preventDefault","elements","delay1","step","amount","target","inputDelay","Number","value","inputStep","inputAmount","Notify","info","i","then","success","catch","failure"],"version":3,"file":"03-promises.b8b07f50.js.map"}